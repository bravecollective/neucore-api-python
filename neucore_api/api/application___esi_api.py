# coding: utf-8

"""
    Neucore API

    Client library of Neucore API  # noqa: E501

    The version of the OpenAPI document: 1.14.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from neucore_api.api_client import ApiClient
from neucore_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ApplicationESIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def esi_post_v1(self, esi_path_query, datasource, body, **kwargs):  # noqa: E501
        """Same as GET /app/v1/esi, but for POST requests.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esi_post_v1(esi_path_query, datasource, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str esi_path_query: The ESI path and query string (without the datasource parameter). (required)
        :param str datasource: The EVE character ID those token should be used to make the ESI request (required)
        :param str body: JSON encoded data. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.esi_post_v1_with_http_info(esi_path_query, datasource, body, **kwargs)  # noqa: E501

    def esi_post_v1_with_http_info(self, esi_path_query, datasource, body, **kwargs):  # noqa: E501
        """Same as GET /app/v1/esi, but for POST requests.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esi_post_v1_with_http_info(esi_path_query, datasource, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str esi_path_query: The ESI path and query string (without the datasource parameter). (required)
        :param str datasource: The EVE character ID those token should be used to make the ESI request (required)
        :param str body: JSON encoded data. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'esi_path_query',
            'datasource',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esi_post_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'esi_path_query' is set
        if self.api_client.client_side_validation and ('esi_path_query' not in local_var_params or  # noqa: E501
                                                        local_var_params['esi_path_query'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `esi_path_query` when calling `esi_post_v1`")  # noqa: E501
        # verify the required parameter 'datasource' is set
        if self.api_client.client_side_validation and ('datasource' not in local_var_params or  # noqa: E501
                                                        local_var_params['datasource'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `datasource` when calling `esi_post_v1`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `esi_post_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'esi_path_query' in local_var_params and local_var_params['esi_path_query'] is not None:  # noqa: E501
            query_params.append(('esi-path-query', local_var_params['esi_path_query']))  # noqa: E501
        if 'datasource' in local_var_params and local_var_params['datasource'] is not None:  # noqa: E501
            query_params.append(('datasource', local_var_params['datasource']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app/v1/esi', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def esi_v1(self, esi_path_query, datasource, **kwargs):  # noqa: E501
        """Makes an ESI GET request on behalf on an EVE character and returns the result.  # noqa: E501

        Needs role: app-esi<br>      *         Public ESI routes are not allowed.<br>      *         The following headers from ESI are passed through to the response if they exist:                Content-Type Expires X-Esi-Error-Limit-Remain X-Esi-Error-Limit-Reset X-Pages warning, Warning<br>      *         The HTTP status code from ESI is also passed through, so there may be more than the documented ones.<br>      *         The ESI path and query parameters can alternatively be appended to the path of this endpoint,                this allows to use OpenAPI clients that were generated for the ESI API,                see doc/app-esi-examples.php for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esi_v1(esi_path_query, datasource, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str esi_path_query: The ESI path and query string (without the datasource parameter). (required)
        :param str datasource: The EVE character ID those token should be used to make the ESI request (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.esi_v1_with_http_info(esi_path_query, datasource, **kwargs)  # noqa: E501

    def esi_v1_with_http_info(self, esi_path_query, datasource, **kwargs):  # noqa: E501
        """Makes an ESI GET request on behalf on an EVE character and returns the result.  # noqa: E501

        Needs role: app-esi<br>      *         Public ESI routes are not allowed.<br>      *         The following headers from ESI are passed through to the response if they exist:                Content-Type Expires X-Esi-Error-Limit-Remain X-Esi-Error-Limit-Reset X-Pages warning, Warning<br>      *         The HTTP status code from ESI is also passed through, so there may be more than the documented ones.<br>      *         The ESI path and query parameters can alternatively be appended to the path of this endpoint,                this allows to use OpenAPI clients that were generated for the ESI API,                see doc/app-esi-examples.php for more.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.esi_v1_with_http_info(esi_path_query, datasource, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str esi_path_query: The ESI path and query string (without the datasource parameter). (required)
        :param str datasource: The EVE character ID those token should be used to make the ESI request (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'esi_path_query',
            'datasource'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method esi_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'esi_path_query' is set
        if self.api_client.client_side_validation and ('esi_path_query' not in local_var_params or  # noqa: E501
                                                        local_var_params['esi_path_query'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `esi_path_query` when calling `esi_v1`")  # noqa: E501
        # verify the required parameter 'datasource' is set
        if self.api_client.client_side_validation and ('datasource' not in local_var_params or  # noqa: E501
                                                        local_var_params['datasource'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `datasource` when calling `esi_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'esi_path_query' in local_var_params and local_var_params['esi_path_query'] is not None:  # noqa: E501
            query_params.append(('esi-path-query', local_var_params['esi_path_query']))  # noqa: E501
        if 'datasource' in local_var_params and local_var_params['datasource'] is not None:  # noqa: E501
            query_params.append(('datasource', local_var_params['datasource']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/app/v1/esi', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
