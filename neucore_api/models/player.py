# coding: utf-8

"""
    Neucore API

    Client library of Neucore API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Player(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'status': 'str',
        'roles': 'list[Role]',
        'characters': 'list[Character]',
        'groups': 'list[Group]',
        'manager_groups': 'list[Group]',
        'manager_apps': 'list[App]',
        'removed_characters': 'list[RemovedCharacter]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'roles': 'roles',
        'characters': 'characters',
        'groups': 'groups',
        'manager_groups': 'managerGroups',
        'manager_apps': 'managerApps',
        'removed_characters': 'removedCharacters'
    }

    def __init__(self, id=None, name=None, status=None, roles=None, characters=None, groups=None, manager_groups=None, manager_apps=None, removed_characters=None):  # noqa: E501
        """Player - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._status = None
        self._roles = None
        self._characters = None
        self._groups = None
        self._manager_groups = None
        self._manager_apps = None
        self._removed_characters = None
        self.discriminator = None

        self.id = id
        self.name = name
        if status is not None:
            self.status = status
        if roles is not None:
            self.roles = roles
        if characters is not None:
            self.characters = characters
        if groups is not None:
            self.groups = groups
        if manager_groups is not None:
            self.manager_groups = manager_groups
        if manager_apps is not None:
            self.manager_apps = manager_apps
        if removed_characters is not None:
            self.removed_characters = removed_characters

    @property
    def id(self):
        """Gets the id of this Player.  # noqa: E501


        :return: The id of this Player.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Player.


        :param id: The id of this Player.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Player.  # noqa: E501

        A name for the player.  This is the EVE character name of the current main character or of the last main character if there is currently none.  # noqa: E501

        :return: The name of this Player.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Player.

        A name for the player.  This is the EVE character name of the current main character or of the last main character if there is currently none.  # noqa: E501

        :param name: The name of this Player.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this Player.  # noqa: E501

        Player account status.  # noqa: E501

        :return: The status of this Player.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Player.

        Player account status.  # noqa: E501

        :param status: The status of this Player.  # noqa: E501
        :type: str
        """
        allowed_values = ["standard", "managed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def roles(self):
        """Gets the roles of this Player.  # noqa: E501

        Roles for authorization.  # noqa: E501

        :return: The roles of this Player.  # noqa: E501
        :rtype: list[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Player.

        Roles for authorization.  # noqa: E501

        :param roles: The roles of this Player.  # noqa: E501
        :type: list[Role]
        """

        self._roles = roles

    @property
    def characters(self):
        """Gets the characters of this Player.  # noqa: E501


        :return: The characters of this Player.  # noqa: E501
        :rtype: list[Character]
        """
        return self._characters

    @characters.setter
    def characters(self, characters):
        """Sets the characters of this Player.


        :param characters: The characters of this Player.  # noqa: E501
        :type: list[Character]
        """

        self._characters = characters

    @property
    def groups(self):
        """Gets the groups of this Player.  # noqa: E501

        Group membership.  # noqa: E501

        :return: The groups of this Player.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Player.

        Group membership.  # noqa: E501

        :param groups: The groups of this Player.  # noqa: E501
        :type: list[Group]
        """

        self._groups = groups

    @property
    def manager_groups(self):
        """Gets the manager_groups of this Player.  # noqa: E501

        Manager of groups.  # noqa: E501

        :return: The manager_groups of this Player.  # noqa: E501
        :rtype: list[Group]
        """
        return self._manager_groups

    @manager_groups.setter
    def manager_groups(self, manager_groups):
        """Sets the manager_groups of this Player.

        Manager of groups.  # noqa: E501

        :param manager_groups: The manager_groups of this Player.  # noqa: E501
        :type: list[Group]
        """

        self._manager_groups = manager_groups

    @property
    def manager_apps(self):
        """Gets the manager_apps of this Player.  # noqa: E501

        Manager of apps.  # noqa: E501

        :return: The manager_apps of this Player.  # noqa: E501
        :rtype: list[App]
        """
        return self._manager_apps

    @manager_apps.setter
    def manager_apps(self, manager_apps):
        """Sets the manager_apps of this Player.

        Manager of apps.  # noqa: E501

        :param manager_apps: The manager_apps of this Player.  # noqa: E501
        :type: list[App]
        """

        self._manager_apps = manager_apps

    @property
    def removed_characters(self):
        """Gets the removed_characters of this Player.  # noqa: E501

        Characters that were removed from a player (API: not included by default).  # noqa: E501

        :return: The removed_characters of this Player.  # noqa: E501
        :rtype: list[RemovedCharacter]
        """
        return self._removed_characters

    @removed_characters.setter
    def removed_characters(self, removed_characters):
        """Sets the removed_characters of this Player.

        Characters that were removed from a player (API: not included by default).  # noqa: E501

        :param removed_characters: The removed_characters of this Player.  # noqa: E501
        :type: list[RemovedCharacter]
        """

        self._removed_characters = removed_characters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Player):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
